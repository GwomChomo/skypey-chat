{"version":3,"sources":["static-data.js","reducers/user.js","constants/action-types.js","reducers/messages.js","reducers/index.js","reducers/contacts.js","reducers/activeUserId.js","reducers/editing.js","reducers/typing.js","reducers/searching.js","store/index.js","actions/index.js","containers/User.js","components/Sidebar/Sidebar.js","components/Empty/Empty.js","components/Header/Header.js","components/PopoverComponent.js","components/Chats/Chats.js","containers/MessageInput.js","containers/ChatWindow.js","components/Main/Main.js","containers/App.js","serviceWorker.js","index.js"],"names":["numberOfUsers","shortid","require","txtgen","faker","_","users","Array","from","length","generateUser","contacts","mapKeys","getMessages","messagesPerUser","messages","forEach","user","numberOfMsgs","user_id","Object","objectSpread","v","i","number","text","sentence","is_user_msg","random","boolean","name","findName","email","internet","profile_pic","avatar","status","generate","SET_ACTIVE_USER_ID","SET_TYPING_VALUE","SET_EDITING","SEND_MESSAGE","SEARCH_CONTACTS","DELETE_MESSAGE","EDIT_MESSAGE","userId","message","allUserMessages","combineReducers","state","arguments","undefined","activeUserId","action","type","payload","editing","keys","pop","defineProperty","edited","cloneDeep","messageId","typing","searching","store","createStore","reducer","setActiveUserId","id","setTypingValue","value","setEditing","handleUserClick","_ref2","dispatch","User","_ref","react_default","a","createElement","className","onClick","bind","src","alt","CurrentUser","Search","props","placeholder","onChange","e","target","AllChats","_ref3","map","contact","src_containers_User","key","Sidebar","getState","filteredContacts","filter","toLowerCase","includes","Sidebar_CurrentUser","Sidebar_Search","Sidebar_AllChats","Empty","first_name","split","Header","userName","PopoverComponent","_this$props","this","trigger","isOpen","placement","toggle","UncontrolledPopover","PopoverBody","children","Component","Chat","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","isHovered","popoverOpen","handleDeleteMessage","assertThisInitialized","handleEditMessage","togglePopover","setState","_this$props$message","target_key","concat","Fragment","Chats_MenuIcon","style","fontSize","fontStyle","color","components_PopoverComponent","Chats","_this2","scrollToBottom","chatsRef","current","scrollTop","scrollHeight","React","createRef","_this3","ref","Chats_Chat","MenuIcon","index_es","icon","faAngleDown","MessageInput","onSubmit","preventDefault","trim","sendMessage","ChatWindow","_state$contacts$activ","components_Header_Header","components_Chats_Chats","values","src_containers_MessageInput","Main","src_containers_ChatWindow","components_Empty_Empty","App","_store$getState","components_Sidebar_Sidebar","components_Main_Main","Boolean","window","location","hostname","match","render","fancyLog","ReactDOM","containers_App","document","getElementById","console","log","navigator","serviceWorker","ready","then","registration","unregister","subscribe"],"mappings":"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","file":"static/js/main.ddf11677.chunk.js","sourcesContent":["const shortid = require(\"shortid\"); // shortid.generate() returns a unique \"short\" id\r\nconst txtgen = require(\"txtgen\"); // txtgen.sentence() returns random \"readable\" sentences\r\nconst faker = require(\"faker\"); // faker is used for generating random fake data.\r\nconst _ = require(\"lodash\"); // lodash is a utility lib for Javascript\r\n\r\nconst users = generateUsers(10);\r\nexport const contacts = _.mapKeys(users, \"user_id\");\r\nexport const getMessages = messagesPerUser => {\r\n    let messages = {};\r\n    _.forEach(users, user => {\r\n        messages[user.user_id] = {\r\n            ..._.mapKeys(generateMsgs(messagesPerUser), \"number\")\r\n        };\r\n    });\r\n    return messages;\r\n};\r\n\r\n// just an example of how the state object is structured\r\nexport const state = {\r\n    user: generateUser(),\r\n    messages: getMessages(10),\r\n    typing: \"\",\r\n    contacts,\r\n    activeUserId: null\r\n};\r\n\r\n/**\r\n * @returns {Object} - a new user object\r\n */\r\nexport function generateUser() {\r\n\r\n    return {\r\n        name: faker.name.findName(),\r\n        email: faker.internet.email(),\r\n        profile_pic: faker.internet.avatar(),\r\n        status: txtgen.sentence(),\r\n        user_id: shortid.generate()\r\n    };\r\n}\r\n/**\r\n * @returns {Object} - a new message object\r\n */\r\nfunction generateMsg(number) {\r\n    return {\r\n        number,\r\n        text: txtgen.sentence(),\r\n        is_user_msg: faker.random.boolean()\r\n    };\r\n}\r\n/**\r\n *\r\n * @param {Number} numberOfUsers - the number of users to be generated\r\n * @param {Function} generateUser - function that generates a single user\r\n * @returns {Array} - an array of user objects with length n = numberOfUsers\r\n */\r\nfunction generateUsers(numberOfUsers) {\r\n    return Array.from({ length: numberOfUsers }, () => generateUser());\r\n}\r\n\r\nfunction generateMsgs(numberOfMsgs) {\r\n    return Array.from({ length: numberOfMsgs }, (v, i) => generateMsg(i));\r\n}","import { generateUser } from \"../static-data\";\r\n\r\nexport default (state = generateUser(), action)=> {\r\n    return state;\r\n}\r\n\r\n","\r\n\r\nexport const SET_ACTIVE_USER_ID = \"SET_ACTIVE_USER_ID\";\r\nexport const SET_TYPING_VALUE = \"SET_TYPING_VALUE\";\r\nexport const SET_EDITING = \"SET_EDITING\";\r\nexport const SEND_MESSAGE = \"SEND_MESSAGE\";\r\nexport const SEARCH_CONTACTS = \"SEARCH_CONTACTS\";\r\nexport const DELETE_MESSAGE = \"DELETE_MESSAGE\";\r\nexport const EDIT_MESSAGE = \"EDIT_MESSAGE\";\r\n","import {getMessages} from \"../static-data\";\r\nimport { SEND_MESSAGE, DELETE_MESSAGE, EDIT_MESSAGE} from \"../constants/action-types\";\r\nimport _ from  \"lodash\";\r\n\r\n    let {userId, message, allUserMessages, number} = \"\";\r\nexport default function messages(state = getMessages(10), action) {\r\n    switch(action.type){\r\n        case SEND_MESSAGE:\r\n                userId = action.payload.userId;\r\n                message = action.payload.message\r\n                 allUserMessages = state[userId];\r\n                number = + Object.keys(allUserMessages).pop() + 1;\r\n            return {\r\n                ...state,\r\n                [userId]:{\r\n                    ...allUserMessages,\r\n                    [number]:{\r\n                        number,\r\n                        text: message,\r\n                        is_user_msg: true,\r\n                        edited: false\r\n                    }\r\n                }\r\n\r\n            };\r\n        case DELETE_MESSAGE:\r\n                userId = action.payload.userId;\r\n                number = action.payload.number;\r\n                allUserMessages = _.cloneDeep(state[userId]); //make a deep clone of the chats with  a user.. state[user] refers to all the chats with a particular contact.\r\n                delete allUserMessages[number];//delete the message in the current index.\r\n            return {\r\n                ...state,\r\n                [userId]:{\r\n                    ...allUserMessages\r\n                }\r\n            }\r\n\r\n        case EDIT_MESSAGE: \r\n            userId = action.payload.userId;\r\n            message = action.payload.message;\r\n            number = action.payload.messageId;\r\n            allUserMessages = _.cloneDeep(state[userId]);\r\n            allUserMessages[number].text = message;\r\n            allUserMessages[number].edited = true;\r\n\r\n            return{\r\n                ...state,\r\n                [userId]: {\r\n                    ...allUserMessages\r\n                }\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport user from \"./user\";\r\nimport contacts from \"./contacts\";\r\nimport activeUserId from './activeUserId';\r\nimport messages from \"./messages\";\r\nimport typing from \"./typing\";\r\nimport searching from \"./searching\";\r\nimport editing from \"./editing\";\r\n\r\nexport default combineReducers({\r\n    contacts,\r\n    user,\r\n    activeUserId,\r\n    editing,\r\n    messages,\r\n    typing, \r\n    searching\r\n});\r\n","import {contacts} from '../static-data';\r\n\r\n\r\nexport default (state = contacts, action)=>{\r\n    return state;\r\n}","import {SET_ACTIVE_USER_ID} from \"../constants/action-types\"\r\n\r\nexport default function activeUserId(state = null, action) {\r\n    switch (action.type) {\r\n        case SET_ACTIVE_USER_ID:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {SET_EDITING} from \"../constants/action-types\";\r\n\r\nexport default function editing(state = \"\", action) {\r\n    switch (action.type) {\r\n        case SET_EDITING:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","import {SEND_MESSAGE, SET_TYPING_VALUE, EDIT_MESSAGE} from \"../constants/action-types\";\r\n\r\nexport default function typing(state = \"\", action) {\r\n    switch (action.type) {\r\n        case SET_TYPING_VALUE:\r\n            return action.payload;\r\n        case SEND_MESSAGE:\r\n            return \"\";\r\n        case EDIT_MESSAGE:\r\n            return \"\";\r\n        default:\r\n            return state;\r\n    }\r\n}","\r\nimport {SEARCH_CONTACTS} from \"../constants/action-types\"\r\n\r\n\r\nexport default function searching(state = \"\", action){\r\n    switch(action.type){\r\n        case SEARCH_CONTACTS:\r\n             return action.payload;\r\n        default:\r\n            return state\r\n    }\r\n  \r\n}","import {createStore} from 'redux';\r\nimport reducer from '../reducers';\r\n\r\n\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import { SET_ACTIVE_USER_ID, SET_TYPING_VALUE, SET_EDITING, SEND_MESSAGE, SEARCH_CONTACTS, DELETE_MESSAGE, EDIT_MESSAGE} from \"../constants/action-types\";\r\n\r\nexport const setActiveUserId = id => ({\r\n    type: SET_ACTIVE_USER_ID,\r\n    payload: id\r\n});\r\n\r\nexport const setTypingValue = (value)=>{\r\n    return {\r\n        type: SET_TYPING_VALUE,\r\n        payload: value\r\n}};\r\n\r\nexport const setEditing = (value) =>{\r\n    return {\r\n        type: SET_EDITING,\r\n        payload: value\r\n    }\r\n}\r\n\r\nexport const sendMessage = (message, userId)=>{\r\n   return  {\r\n        type: SEND_MESSAGE,\r\n        payload: {\r\n            message,\r\n            userId\r\n        }\r\n    }\r\n};\r\n\r\nexport const searchContacts = value=>({\r\n    type: SEARCH_CONTACTS,\r\n    payload: value\r\n});\r\n\r\nexport const deleteMessage = (userId, number) =>({\r\n    type: DELETE_MESSAGE,\r\n    payload:{\r\n        userId, \r\n        number\r\n    }\r\n});\r\n\r\nexport const editMessage = (message, userId, messageId) =>({\r\n    type: EDIT_MESSAGE,\r\n    payload:{\r\n        userId,\r\n        message, \r\n        messageId\r\n    }\r\n}); ","import React from 'react';\r\nimport \"./User.css\";\r\nimport store from \"../store\";\r\nimport {setActiveUserId} from \"../actions/index\";\r\n\r\nconst User =({user})=>{\r\n    const {name, profile_pic, status} = user;\r\n    return (\r\n        <div className=\"User\" onClick={handleUserClick.bind(null, user)}>\r\n            <img src={profile_pic} alt={name} className=\"User__pic\" />\r\n            <div className=\"User__details\">\r\n                <p className=\"User__details-name\">{name}</p>\r\n                <p className=\"User__details-status\">{status}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction handleUserClick({user_id}){\r\n    store.dispatch(setActiveUserId(user_id));\r\n}\r\n\r\n\r\n\r\nexport default User;","import React from 'react';\r\nimport store from \"../../store\";\r\nimport {searchContacts} from '../../actions';\r\nimport './Sidebar.css';\r\nimport User from '../../containers/User';\r\n\r\n\r\nconst Sidebar =({contacts, user}) =>{\r\n   const state = store.getState();\r\n   const {searching} = state;\r\n    \r\n   //use the current state of the search box to filter the contacts\r\n    const filteredContacts = contacts.filter(contact=>{\r\n        return contact.name.toLowerCase().includes(searching.toLowerCase());\r\n    });\r\n\r\n    return (\r\n        <aside className=\"Sidebar\">\r\n            <div className= \"user-section-container\"> \r\n                <CurrentUser user = {user} />\r\n                <Search value = {searching}/> \r\n            </div>\r\n            <AllChats  contacts = {filteredContacts} />\r\n        </aside>\r\n    );\r\n    \r\n}\r\n\r\n\r\nconst CurrentUser = ({user})=>{\r\n    const {name, profile_pic} = user;\r\n    return(\r\n\r\n            <section id =\"main-user\" >\r\n                <img src={profile_pic} alt={name} className=\"user-pic\" />\r\n            </section>\r\n    );\r\n}\r\n\r\nconst Search = (props)=>{\r\n\r\n    const handleChange = (e) =>{\r\n        store.dispatch (searchContacts(e.target.value));\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <input \r\n                value = {props.value} \r\n                id =\"main-user-search\" \r\n                placeholder = \"Search or start new chat\" \r\n                onChange = {handleChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst AllChats = ({contacts})=>{\r\n\r\n    return (\r\n        <div className = \"sidebar-chats\">\r\n                    {\r\n                       contacts.map(contact => <User user={contact} key={contact.user_id} />)\r\n                    }\r\n            </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default Sidebar;","import React from \"react\";\r\nimport \"./Empty.css\";\r\n\r\nconst Empty = ({ user }) => {\r\n    const { name, profile_pic, status } = user;\r\n    const first_name = name.split(\" \")[0];\r\n\r\n    return (\r\n        <div className=\"Empty\">\r\n            <h1 className=\"Empty__name\">Welcome, {first_name} </h1>\r\n            <img src={profile_pic} alt={name} className=\"Empty__img\" />\r\n            <p className=\"Empty__status\">\r\n                <b>Status:</b> {status}\r\n            </p>\r\n            <button className=\"Empty__btn\">Start a conversation</button>\r\n            <p className=\"Empty__info\">\r\n                Search for someone to start chatting with or go to Contacts to see who\r\n                is available\r\n            </p>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Empty;","import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nconst Header =(props)=> {\r\n    const {userName, status} = props;\r\n    return (\r\n        <header className=\"Header\">\r\n            <h1 className=\"Header__name\">{userName}</h1>\r\n            <p className=\"Header__status\">{status}</p>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport {\r\n    UncontrolledPopover,\r\n    PopoverBody\r\n} from 'reactstrap';\r\n\r\n\r\nclass PopoverComponent extends Component{\r\n  \r\n\r\n\r\n    render(){\r\n        const {trigger, isOpen, placement, target, toggle} = this.props;\r\n        return(\r\n            \r\n             <UncontrolledPopover trigger ={trigger}  isOpen={isOpen} placement={placement} target={target} toggle={toggle} >\r\n                    <PopoverBody>\r\n                        {this.props.children}   \r\n                    </PopoverBody>\r\n            </UncontrolledPopover> \r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default PopoverComponent;\r\n\r\n\r\n","import React, { Component } from \"react\";\r\nimport \"./Chats.css\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleDown} from '@fortawesome/free-solid-svg-icons';\r\nimport PopoverComponent from '../PopoverComponent';\r\nimport store from '../../store';\r\nimport { deleteMessage, setTypingValue, setEditing} from \"../../actions\";\r\n\r\n\r\nclass  Chat extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            isHovered:false, \r\n            popoverOpen: false\r\n        }\r\n\r\n        // this.messageHover = this.messageHover.bind(this);\r\n        this.handleDeleteMessage = this.handleDeleteMessage.bind(this);\r\n        this.handleEditMessage = this.handleEditMessage.bind(this);\r\n        this.togglePopover = this.togglePopover.bind(this);\r\n\r\n    }\r\n\r\n    togglePopover(){\r\n        this.setState({\r\n            popoverOpen: !this.state.popoverOpen\r\n        })\r\n    }\r\n\r\n    handleDeleteMessage(){\r\n        store.dispatch(deleteMessage(this.props.user_id, this.props.message.number));\r\n    }\r\n\r\n    handleEditMessage(){\r\n        store.dispatch(setTypingValue(this.props.message.text));\r\n        store.dispatch(setEditing(this.props.message.number));\r\n        this.togglePopover();\r\n    }\r\n\r\n\r\n    //wrap the span element within a div, alongside the font awesome icon. Div could be a flex item with row direction to avoid text moving \r\n    render(){\r\n        \r\n        const {text, is_user_msg, number, edited} = this.props.message;\r\n        const target_key = `popover${this.props.user_id}${number}`; //target key is a unique id for each message in the entire app for easy targeting by the popover\r\n        \r\n        return(\r\n            <>\r\n                <div id =\"message_container\" className={`Chat ${is_user_msg ? \"is-user-msg\" : \"\" } `} >\r\n                    {text}\r\n                    <div id =\"message_container_inner\">\r\n                        <MenuIcon id = {target_key}  className =\"show chat-menu-icon\" />\r\n                        {edited && <span style ={{fontSize:'0.7rem', fontStyle:'italic', color:'gray'}}>Edited</span>}\r\n                    </div>\r\n                </div>\r\n\r\n                <PopoverComponent\r\n                    trigger = \"legacy\"\r\n                    isOpen = {this.state.popoverOpen}\r\n                    placement = \"top\"\r\n                    target = {target_key}\r\n                    toggle = {this.togglePopover}\r\n                >\r\n                    <ul className = \"list-group list-group-flush\">\r\n                        <li className =\"list-group-item\" onClick = {this.handleDeleteMessage} >Delete Message</li>\r\n                        {is_user_msg && <li className =\"list-group-item\" onClick = {this.handleEditMessage}>Edit Message</li>}\r\n                    </ul>\r\n                </PopoverComponent>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nclass Chats extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.chatsRef = React.createRef();\r\n    }\r\n    componentDidMount() {\r\n        this.scrollToBottom();\r\n    }\r\n    componentDidUpdate() {\r\n        this.scrollToBottom();\r\n    }\r\n\r\n    scrollToBottom = () => {\r\n        this.chatsRef.current.scrollTop = this.chatsRef.current.scrollHeight;\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Chats\" ref = {this.chatsRef}>\r\n                {this.props.messages.map(message => (\r\n                    <Chat message={message} key={message.number} user_id = {this.props.user_id} />\r\n                ))}\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst MenuIcon = ({id, className}) =>{\r\n    return (\r\n        <span id = {id} className = {className}>\r\n            <FontAwesomeIcon icon ={faAngleDown}  />\r\n        </span>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\nexport default Chats;\r\n","import React from \"react\";\r\nimport store from \"../store\";\r\nimport { setTypingValue, sendMessage, setEditing, editMessage} from \"../actions\";\r\nimport \"./MessageInput.css\";\r\n\r\nconst MessageInput = ({ value }) => {\r\n\r\n    const state = store.getState();\r\n\r\n    const handleChange = e => {\r\n        store.dispatch(setTypingValue(e.target.value));\r\n    };\r\n\r\n    const handleSubmit =e=>{\r\n        e.preventDefault();\r\n        const { typing, activeUserId, editing} = state;\r\n      \r\n        if(typing.trim().length>0){//stop submission of empty message\r\n            if(editing){\r\n                 store.dispatch(editMessage(typing, activeUserId, editing));//editing is the id of the message being edited\r\n                 store.dispatch(setEditing(\"\"));\r\n                 return\r\n            }\r\n            store.dispatch(sendMessage(typing, activeUserId));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form className=\"Message\" onSubmit={handleSubmit}>\r\n            <input\r\n                className=\"Message__input\"\r\n                onChange={handleChange}\r\n                value={value}\r\n                placeholder=\"write a message\"\r\n            />\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default MessageInput;","import React from \"react\";\r\nimport Header from '../components/Header/Header';\r\nimport Chats from \"../components/Chats/Chats\"\r\nimport _ from  \"lodash\";\r\nimport store from \"../store\"\r\nimport \"./ChatWindow.css\";\r\nimport MessageInput from \"./MessageInput\"\r\n\r\nconst ChatWindow = ({ activeUserId }) => {\r\n    const state = store.getState();\r\n    const {name, status} = state.contacts[activeUserId];\r\n    const messages = state.messages[activeUserId];\r\n    const { typing } = state;\r\n\r\n    return (\r\n        <div className=\"ChatWindow\">\r\n            <Header userName = {name} status = {status} />\r\n            <Chats messages = {_.values(messages)} user_id = {activeUserId}/>\r\n            <MessageInput value={typing} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatWindow;","import React from \"react\";\r\nimport \"./Main.css\";\r\nimport Empty from \"../Empty/Empty\";\r\nimport ChatWindow from \"../../containers/ChatWindow\";\r\n\r\n\r\nconst Main = ({user, activeUserId}) => {\r\n\r\n    const renderMainContent = () => {\r\n        if (!activeUserId) {\r\n            return <Empty user={user} activeUserId={activeUserId} />;\r\n        } else {\r\n            return <ChatWindow activeUserId={activeUserId} />;\r\n        }\r\n    };\r\n    return <main className=\"Main\">{renderMainContent()}</main>;\r\n};\r\n\r\nexport default Main;","import React from 'react';\nimport Sidebar from '../components/Sidebar/Sidebar';\nimport store from '../store/index';\nimport Main from '../components/Main/Main';\nimport './App.css';\nimport _ from 'lodash';\n\nfunction App() {\n    const {contacts, user, activeUserId} = store.getState();\n\n  return (\n    <div className=\"App\">\n      <Sidebar contacts = {_.values(contacts)}  user = {user}/>\n      <Main user ={user} activeUserId ={activeUserId} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport store from './store/index';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst render = () => {\n    fancyLog();\n    ReactDOM.render(<App />, document.getElementById('root'));}\n\n\nconst fancyLog= () =>{\n    console.log(\"%c Rendered with 👉 👉👇\", \"background: purple; color: #FFF\");\n    console.log(store.getState());\n}\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nrender();\n\nserviceWorker.unregister();\nstore.subscribe(render);\n\n\n\n\n"],"sourceRoot":""}